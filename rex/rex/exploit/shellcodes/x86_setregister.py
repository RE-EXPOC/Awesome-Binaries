import claripy
import logging
from rex.exploit.shellcode import Shellcode

l = logging.getLogger("rex.exploit.shellcodes.cgc_x86_setregister")

class X86SetRegister(Shellcode):

    supported_platforms = ["cgc", "unix"]

    arch = "X86"

    name = "setregister"

    codes = {
            'eax': [b"\xb8", b"\xbb", b"\xff\xe3"],
            'ebx': [b"\xbb", b"\xb8", b"\xff\xee"],
            'ecx': [b"\xb9", b"\xbb", b"\xff\xe3"],
            'edx': [b"\xba", b"\xbb", b"\xff\xe3"],
            'edi': [b"\xbf", b"\xbb", b"\xff\xe3"],
            'esi': [b"\xbe", b"\xbb", b"\xff\xe3"],
            'esp': [b"\xbc", b"\xbb", b"\xff\xe3"],
            'ebp': [b"\xbd", b"\xbb", b"\xff\xe3"],
            }

    def to_raw(self, register, value, ip):
        '''
        :param register: register to set
        :param value: value to set register to
        :param ip: ip value to crash at
        '''

        if isinstance(value, int):
            value = claripy.BVV(value, 32)
        if isinstance(ip, int):
            ip = claripy.BVV(ip, 32)

        code_row = None
        try:
            code_row = [claripy.BVV(x) for x in self.codes[register]]
        except KeyError:
            raise ValueError("register '%s' does not exist" % register)

        return claripy.Concat(code_row[0], value.reversed, code_row[1], ip.reversed,  code_row[2])
